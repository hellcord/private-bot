import type { ArgumentsParser } from "./ArgumentsParser";
import { PrivateVoice } from "./PrivateVoice";

export type Command = {
  title: string;
  args?: string[];
  forModerator?: boolean;
  exec: (voice: PrivateVoice, args: ArgumentsParser) => void | string | Promise<void | string>;
};

export const PrivateCommands: { [key: string]: Command; } = {
  ban: {
    title: '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
    args: ['user'],
    async exec(voice, args) {
      const user = await args.user({ notBot: true, notMe: true });
      if (voice.blocks.has(user.id))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      if (user.permissions.has('MoveMembers'))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      voice.blocks.add(user.id);
      await voice.updateConfig();
      await voice.block(user);
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`;
    }
  },
  block: {
    title: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã.',
    args: ['user'],
    async exec(voice, args) {
      const user = await args.user({ notBot: true, notMe: true });
      if (voice.blocks.has(user.id))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      if (user.permissions.has('MoveMembers'))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      await voice.block(user);
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.`;
    }
  },
  revoke: {
    title: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
    args: ['user'],
    async exec(voice, args) {
      if (args.raw.includes('all'))
        return PrivateCommands.revokeall.exec(voice, args);

      const user = await args.user({ notBot: true, notMe: true });
      if (!voice.getBlockList().includes(user.id))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
      voice.blocks.delete(user.id);
      await voice.updateConfig();
      await voice.unblock(user);
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`;
    }
  },
  revokeall: {
    title: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
    async exec(voice) {
      voice.blocks.clear();
      await voice.updateConfig();
      await voice.reset();
      return '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.';
    }
  },
  mute: {
    title: '–ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    args: ['user'],
    async exec(voice, args) {
      const user = await args.user({ notBot: true, notMe: true });
      if (voice.mutes.has(user.id))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–∂–µ –∑–∞–º—å—é—á–µ–Ω.`);
      if (user.permissions.has('MuteMembers'))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º—å—é—á–µ–Ω.`);
      voice.mutes.add(user.id);
      await voice.updateConfig();
      await voice.mute(user);
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.`;
    }
  },
  unmute: {
    title: '–†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    args: ['user'],
    async exec(voice, args) {
      if (args.raw.includes('all'))
        return PrivateCommands.unmuteall.exec(voice, args);
      const user = await args.user({ notBot: true, notMe: true });
      if (!voice.mutes.has(user.id))
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –Ω–µ –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.`);
      voice.mutes.delete(user.id);
      await voice.updateConfig();
      await voice.unmute(user);
      return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —Ä–∞–∑–º—å—é—á–µ–Ω.`;
    }
  },
  unmuteall: {
    title: '–†–∞–∑–º—å—é—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    async exec(voice) {
      voice.mutes.clear();
      await voice.updateConfig();
      await voice.reset();
      return '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —Ä–∞–∑–º—å—é—á–µ–Ω—ã.';
    }
  },
  transfer: {
    title: '–ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫—É.',
    args: ['user'],
    forModerator: true,
    async exec(voice, args) {
      const user = await args.user({ notBot: true });

      if (user.id === voice.ownerId)
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞.`);

      if (user.voice.channelId !== voice.voice.id)
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ.`);

      await voice.transfer(user)
      return `–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω ${user}.`;
    }
  },
  list: {
    title: '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.',
    args: ['page?'],
    forModerator: true,
    async exec(voice, args) {
      const block = new Set(voice.getBlockList());
      const state = (id: string) => {
        return [
          block.has(id) ? 'üí•' : '',
          voice.blocks.has(id) ? '‚ùóÔ∏è' : '',
          voice.mutes.has(id) ? 'üîá' : ''
        ].filter(Boolean).join(' ');
      };

      const blockUsers = [...new Set([...voice.getBlockList(), ...voice.mutes])]
        .map(id => `- <@${id}> ${state(id)}`);
      
      if (!blockUsers.length)
        return '–°–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç.';

      const page = args.number({int: true, default: 1})
      const size = 10
      const start = (page - 1) * size
      
      if(start < 0 || start > blockUsers.length - 1)
        throw new Error('–î–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

      const limitBlockUsers = blockUsers.slice(start, start + size).join('\n');
      const appendString = limitBlockUsers.length < blockUsers.length ? `\n\n–ò –µ—â–µ ${blockUsers.length - limitBlockUsers.length}` : '';
      const pagination = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${Math.ceil(blockUsers.length / size)}`
      const help = `!list [page] - –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.`
      return `–°–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:\n\n${limitBlockUsers}${appendString}\n\n${pagination}\n${help}`;
    }
  },
  random: {
    title: '–†–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–æ–π—Å–µ',
    forModerator: true,
    async exec(voice) {
      return `–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω ${voice.voice.members.random()}`;
    }
  },
  help: {
    title: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
    forModerator: true,
    async exec(voice) {
      await voice.welcomeMessage();
    }
  }
}

